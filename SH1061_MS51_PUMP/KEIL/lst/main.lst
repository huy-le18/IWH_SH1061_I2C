C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 15:36:25 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\main.c LARGE OMF2 OPTIMIZE(7,SPEED) BROWSE INCDIR(..\driver;..\driver
                    -\driver_debug\inc;..\library\library_app\inc;..\library\library_debug\inc;..\driver\driver_app\inc;..\library\library_i2
                    -c\inc) DEBUG PRINT(.\lst\main.lst) TABS(2) OBJECT(.\Output\main.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2020 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          #include "main.h"
   8          
   9          #define CYCLE_FOR_ELCB                17
  10          #define CYCLE_FOR_RESET_ELCB          20
  11          #define FLAG_WRITE          0
  12          #define FLAG_READ           1
  13          
  14          // define error send from master
  15          #define CONNECT_UI_BOARD_ERR_BIT 0
  16          #define OUT_TEMP_HIGHT_ERR_BIT 1
  17          #define FLOW_LOW_ERR_BIT 2
  18          #define TESTING_CB_NOTIFY_BIT 3
  19          #define ADC_OUTPUT_ERR_BIT 4
  20          #define ADC_INPUT_ERR_BIT 5
  21          
  22          #define MAX_FLOW_SAMPLE   5
  23          #define MAX_TIN_SAMPLE    14
  24          
  25          unsigned int FULSE_Tset_to_55[MAX_TIN_SAMPLE][5] = 
  26          {
  27          //   23   28   33   38   43
  28            {309, 325 ,373, 390, 406},   // 16
  29            {294, 303 ,370, 387, 404},   // 18
  30            {280, 297 ,368, 385, 403},   // 20
  31            {265, 293 ,348, 385, 403},   // 22
  32            {233, 291 ,329, 368, 407},   // 24
  33            {228, 269 ,311, 352, 414},   // 26
  34            {203, 270 ,293, 338, 383},   // 28
  35            {175, 225 ,250, 325, 360},   // 30
  36            {170, 230 ,240, 270, 350},   // 32
  37            {160, 220 ,230, 250, 330},   // 34
  38            {150, 200 ,210, 230, 270},   // 36
  39            {130, 170 ,190, 230, 230},   // 38
  40            {110, 140 ,170, 200, 230},   // 40
  41            {90 , 120 ,150, 180, 210}    // 42
  42          };
  43          
  44          unsigned char Flow_sample_arr[5] = {23, 28, 33, 38, 43};
  45          unsigned char Tin_sample_arr[MAX_TIN_SAMPLE] = {16,18,20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42};
  46          
  47          unsigned char Flow_sample_index_l;  // luu chi so thap
C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 15:36:25 PAGE 2   

  48          unsigned char Flow_sample_index_h;  // luu chi so cao
  49          
  50          unsigned char Tin = 0;
  51          unsigned char Flow_in = 0;
  52          unsigned char Tset = 0;
  53          
  54          float F1, F2, F3, F4, F;
  55          unsigned int fulse;
  56          unsigned char delta_t_h;
  57          unsigned char delta_t_l;
  58          unsigned char i = 0;
  59          
  60          volatile bit b_boost;
  61          
  62          unsigned char u8_flag2msInTest = 0, u8_flag10msInTest = 0, u8_flag100msInTest = 0, u8_flag500msInTest = 0;
  63          unsigned char u8_flag2msInPower = 0, u8_flag10msInPower = 0, u8_flag100msInPower = 0, u8_flag500msInPower 
             -= 0;
  64          unsigned char u8_flag2msInPowerOnErr = 0, u8_flag10msInPowerOnErr = 0, u8_flag100msInPowerOnErr = 0, u8_fl
             -ag500msInPowerOnErr = 0;
  65          unsigned int g_u16CounterFlow = 0;
  66          unsigned int g_adcNtcIn = 0;
  67          unsigned int g_adcNtcOut = 0;
  68          unsigned char u8_elcbCounter = 0;
  69          unsigned char u8_restElcbCounter = 0;
  70          extern volatile unsigned char u8_value;
  71          extern volatile bit b_i2c_read_write;
  72          extern volatile bit b_flag_i2c_receive;
  73          extern volatile bit b_flag_i2c_transmit;
  74          extern volatile uint8_t u8_i2c_time_out;
  75          
  76          
  77          volatile bit b_test_cg;   // test chong giat
  78          volatile bit b_reset_cg;  // reset chong giat
  79          volatile uint8_t test_cg_cnt;
  80          volatile uint8_t reset_cg_cnt;
  81          
  82          volatile uint8_t machine_state = 0;
  83          
  84          DeviceMode_t deviceMode = DEVICE_MODE_POWER;
  85          DeviceModePower_t deviceModePower = DEVICE_MODE_POWER_OFF;
  86          DeviceModePowerOn_t deviceModePowerOn = DEVICE_MODE_POWER_ON_NORMAL; 
  87          
  88          
  89          volatile uint8_t cnt_clk = 0;
  90          volatile uint8_t data_rx;
  91          volatile uint8_t m_tx_data[3];
  92          volatile uint8_t m_rx_data[3];
  93          volatile uint8_t temp_out;
  94          volatile uint8_t temp_in;
  95          volatile uint8_t temp_set;
  96          volatile unsigned char data_handle[2];
  97          
  98          volatile bit b_last_state = 1;
  99          volatile bit b_state = 0;
 100          volatile bit b_data = 0;
 101          volatile bit b_test = 0;
 102          volatile bit b_reset = 0;
 103          volatile bit b_cg_in_mode_test = 0;
 104          volatile bit b_cg_in_mode_power = 0;
 105          
 106          uint8_t datas;
 107          
C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 15:36:25 PAGE 3   

 108          void main(void) {
 109   1        uart_sw_init();
 110   1        task_init();
 111   1        flow_counter_init();
 112   1        ntc_in_adc_init();
 113   1        ntc_out_adc_init();
 114   1        ntc_in_select_channel();
 115   1        
 116   1        lo_output_init();
 117   1        reset_lo_output_init();
 118   1        int_os_input_init();
 119   1        ctr_outac_output_init();
 120   1        ctr_triac_output_init();
 121   1        
 122   1        lo_write_low();
 123   1        reset_lo_write_low();
 124   1        ctr_outac_write_low();
 125   1        ctr_triac_write_high();
 126   1        
 127   1        i2c_init_interrupt();
 128   1        gpio_interrupt_init();
 129   1        
 130   1        
 131   1        
 132   1        while (1) 
 133   1        {
 134   2          
 135   2          if(u8_flag_200us == 1)
 136   2          {
 137   3            u8_flag_200us = 0;
 138   3          }
 139   2          if(u8_flag_1ms == 1)
 140   2          {
 141   3            u8_flag_1ms = 0;
 142   3          }
 143   2          if(u8_flag_2ms == 1)
 144   2          {
 145   3            u8_flag_2ms = 0;
 146   3            
 147   3            
 148   3            /*check flag adc*/
 149   3            if(u8_flag_adc == 1)
 150   3            {
 151   4              u8_flag_adc = 0;
 152   4              
 153   4              switch (adc_get_ntc_in_or_ntc_out())
 154   4              {
 155   5                case ADC_CHANNEL_NTC_IN:
 156   5                  g_adcNtcIn = convert12BitsTo10Bit(u16_adc_value);
 157   5                  ntc_out_select_channel();
 158   5                  break;
 159   5                case ADC_CHANNEL_NTC_OUT:
 160   5                  g_adcNtcOut = convert12BitsTo10Bit(u16_adc_value);
 161   5                  ntc_in_select_channel();
 162   5                  break;
 163   5                default:
 164   5                  break;
 165   5              }
 166   4              
 167   4              
 168   4            }
 169   3            
C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 15:36:25 PAGE 4   

 170   3            if ((g_adcNtcIn > ADC_HIGH_LIMIT) || (g_adcNtcIn < ADC_LOW_LIMIT)) {
 171   4              machine_state |= (1 << ADC_INPUT_ERR_BIT);
 172   4      
 173   4            } else {
 174   4              machine_state &= ~(1 << ADC_INPUT_ERR_BIT);
 175   4            }
 176   3            
 177   3            
 178   3            if ((g_adcNtcOut > ADC_HIGH_LIMIT) || (g_adcNtcOut < ADC_LOW_LIMIT)) {
 179   4              machine_state |= (1 << ADC_OUTPUT_ERR_BIT);
 180   4      
 181   4            } else {
 182   4              machine_state &= ~(1 << ADC_OUTPUT_ERR_BIT);
 183   4            }
 184   3            
 185   3            
 186   3            if(g_adcNtcIn < 384) 
 187   3            {
 188   4              g_adcNtcIn = 384;
 189   4            }
 190   3            
 191   3            if(g_adcNtcOut < 384) 
 192   3            {
 193   4              g_adcNtcOut = 384;
 194   4            }
 195   3            
 196   3            /*handle temperature*/
 197   3            getTempFromTable((uint16_t)g_adcNtcIn, &temp_in);
 198   3            getTempFromTable((uint16_t)g_adcNtcOut, &temp_out);
 199   3            
 200   3            
 201   3            if ((temp_out > TEMP_MIN_TO_PROTECT)) {
 202   4              machine_state |= (1 << OUT_TEMP_HIGHT_ERR_BIT);
 203   4      
 204   4            } else {
 205   4              machine_state &= ~(1 << OUT_TEMP_HIGHT_ERR_BIT);
 206   4            }
 207   3            
 208   3            
 209   3            /*process main programer*/
 210   3            switch (deviceMode)
 211   3            {
 212   4              case DEVICE_MODE_START:
 213   4      
 214   4                break;
 215   4              case DEVICE_MODE_TEST:
 216   4                if(int_os_read_state() == 0)
 217   4                {
 218   5                  ctr_outac_write_low();
 219   5                  machine_state |= (1 << TESTING_CB_NOTIFY_BIT);
 220   5                  b_cg_in_mode_test = 1;
 221   5                }
 222   4                else
 223   4                {
 224   5                  machine_state &= ~(1 << TESTING_CB_NOTIFY_BIT);
 225   5                  b_cg_in_mode_test = 0;
 226   5                }
 227   4                break;
 228   4              case DEVICE_MODE_POWER:
 229   4      
 230   4                if(int_os_read_state() == 0)
 231   4                {
C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 15:36:25 PAGE 5   

 232   5                  ctr_outac_write_low();
 233   5                  fulse = 0;
 234   5                  u16NumActive = 0;
 235   5                  num_active_pulse = 0;
 236   5                  num_addition = 0;
 237   5                  
 238   5                  machine_state |= (1 << TESTING_CB_NOTIFY_BIT);
 239   5                  b_cg_in_mode_power = 1;
 240   5                  
 241   5                }
 242   4                else
 243   4                {
 244   5                  machine_state &= ~(1 << TESTING_CB_NOTIFY_BIT);
 245   5                  b_cg_in_mode_power = 0;
 246   5                }
 247   4                break;
 248   4            }
 249   3          }
 250   2          
 251   2          if(u8_flag_10ms == 1)
 252   2          {
 253   3            u8_flag_10ms = 0;
 254   3            
 255   3            if(b_flag_i2c_receive == 1)
 256   3            {
 257   4              if(m_rx_data[2] == CRC8(m_rx_data, 2))
 258   4              {
 259   5                data_handle[0] = m_rx_data[0];
 260   5                data_handle[1] = m_rx_data[1];
 261   5                 
 262   5                temp_set = data_handle[1];
 263   5                if(data_handle[0] & (1 << CMD_TEST_BIT))
 264   5                {
 265   6              
 266   6                  deviceMode = DEVICE_MODE_TEST;
 267   6                  b_test_cg = 1;
 268   6                  
 269   6                  ctr_outac_write_low();
 270   6                  
 271   6                }
 272   5                else if(data_handle[0] & (1 << CMD_RESET_BIT))
 273   5                {
 274   6                  deviceMode = DEVICE_MODE_POWER;
 275   6                  
 276   6                  b_reset_cg = 1;
 277   6                }
 278   5                
 279   5                if(temp_set == 0)
 280   5                {
 281   6                  deviceModePower = DEVICE_MODE_POWER_OFF;
 282   6                }
 283   5                else if(temp_set > 0)
 284   5                {
 285   6                  deviceModePower = DEVICE_MODE_POWER_ON;
 286   6                }
 287   5      
 288   5                b_flag_i2c_receive = 0;
 289   5              }
 290   4            }
 291   3            
 292   3            
 293   3            switch (deviceMode)
C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 15:36:25 PAGE 6   

 294   3            {
 295   4              case DEVICE_MODE_START:
 296   4      
 297   4                break;
 298   4              case DEVICE_MODE_TEST:
 299   4                
 300   4                fulse = 0;
 301   4                u16NumActive = 0;
 302   4                num_active_pulse = 0;
 303   4                num_addition = 0;
 304   4              
 305   4                ctr_outac_write_low();
 306   4                
 307   4                
 308   4                break;
 309   4              case DEVICE_MODE_POWER:
 310   4                
 311   4                break;
 312   4            }
 313   3            
 314   3          }
 315   2          
 316   2          if(u8_flag_50ms == 1)
 317   2          {
 318   3            u8_flag_50ms = 0;
 319   3            
 320   3            if(b_i2c_read_write == FLAG_WRITE)
 321   3            {
 322   4              m_tx_data[0] = machine_state;
 323   4              m_tx_data[1] = temp_out;
 324   4              m_tx_data[2] = CRC8(m_tx_data, 2);  
 325   4              i2c_master_write();
 326   4            }
 327   3            else if (b_i2c_read_write == FLAG_READ)
 328   3            {
 329   4              i2c_master_read();
 330   4            }
 331   3            I2C_SET_START();
 332   3            I2C_CLEAR_SI();
 333   3          }
 334   2          
 335   2      //    if(u8_flag_100ms == 1)
 336   2      //    {
 337   2      //      u8_flag_100ms = 0;
 338   2      //    }
 339   2          
 340   2          if(u8_flag_200ms == 1)
 341   2          {
 342   3            u8_flag_200ms = 0;
 343   3            
 344   3            switch (deviceMode)
 345   3            {
 346   4              case DEVICE_MODE_START:
 347   4      
 348   4                break;
 349   4              case DEVICE_MODE_TEST:
 350   4                
 351   4                break;
 352   4              case DEVICE_MODE_POWER:
 353   4                
 354   4                switch (deviceModePower)
 355   4                {
C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 15:36:25 PAGE 7   

 356   5                  case DEVICE_MODE_POWER_OFF:
 357   5                  
 358   5                    fulse = 0;
 359   5                    u16NumActive = 0;
 360   5                    num_active_pulse = 0;
 361   5                    num_addition = 0;
 362   5                    ctr_outac_write_low();
 363   5                  
 364   5                    break;
 365   5                  case DEVICE_MODE_POWER_ON:
 366   5            
 367   5                    if(machine_state & (1 << OUT_TEMP_HIGHT_ERR_BIT)
 368   5                      || machine_state & (1 << FLOW_LOW_ERR_BIT)
 369   5                      || machine_state & (1 << TESTING_CB_NOTIFY_BIT)
 370   5                      || machine_state & (1 << ADC_OUTPUT_ERR_BIT)
 371   5                      || machine_state & (1 << ADC_INPUT_ERR_BIT))
 372   5                    {
 373   6                      deviceModePowerOn = DEVICE_MODE_POWER_ON_ERR;
 374   6                    }
 375   5                    else
 376   5                    {
 377   6                      deviceModePowerOn = DEVICE_MODE_POWER_ON_NORMAL;
 378   6                    }
 379   5                  
 380   5                    switch (deviceModePowerOn)
 381   5                    {
 382   6                      case DEVICE_MODE_POWER_ON_NORMAL:
 383   6                        if(int_os_read_state() == 0)
 384   6                        {
 385   7                          ctr_outac_write_low();
 386   7                          fulse = 0;
 387   7                          u16NumActive = 0;
 388   7                          num_active_pulse = 0;
 389   7                          num_addition = 0;
 390   7                        
 391   7                          machine_state |= (1 << TESTING_CB_NOTIFY_BIT);
 392   7                          b_cg_in_mode_power = 1;
 393   7                          
 394   7                        }
 395   6                        else
 396   6                        {
 397   7                          ctr_outac_write_high();
 398   7                          machine_state &= ~(1 << TESTING_CB_NOTIFY_BIT);
 399   7                          b_cg_in_mode_power = 0;
 400   7                          mode_power_on_normal_program();
 401   7                        }
 402   6                        
 403   6                        break;
 404   6                      case DEVICE_MODE_POWER_ON_ERR:
 405   6                        fulse = 0;
 406   6                        u16NumActive = 0;
 407   6                        num_active_pulse = 0;
 408   6                        num_addition = 0;
 409   6                        ctr_outac_write_low();
 410   6                        
 411   6                        break;
 412   6                    }
 413   5                    
 414   5                    break;
 415   5                }
 416   4            
 417   4                break;
C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 15:36:25 PAGE 8   

 418   4            }
 419   3            
 420   3          }
 421   2      //    if(u8_flag_500ms == 1)
 422   2      //    {
 423   2      //      u8_flag_500ms = 0;
 424   2      //      
 425   2      //      uart_sw_send_byte('\n');
 426   2      //      uart_sw_send_number(u16NumActive);
 427   2      //      uart_sw_send_byte('\n');
 428   2      ////      u8_detect_zero = 0;
 429   2      //      uart_sw_send_number(num_active_pulse);
 430   2      //      uart_sw_send_byte('\n');
 431   2      //      
 432   2      //      uart_sw_send_number(num_addition);
 433   2      //      uart_sw_send_byte('\n');
 434   2      //    }
 435   2          if(u8_flag_1s == 1)
 436   2          {
 437   3            u8_flag_1s = 0;
 438   3            
 439   3            g_u16CounterFlow = flow_counter_read();
 440   3            flow_counter_reset();
 441   3            
 442   3            if(g_u16CounterFlow < FLOW_MIN_TO_PROTECT)
 443   3            {
 444   4              machine_state |= (1 << FLOW_LOW_ERR_BIT);
 445   4            }
 446   3            else
 447   3            {
 448   4              machine_state &= ~(1 << FLOW_LOW_ERR_BIT);
 449   4            }
 450   3            
 451   3            
 452   3      //      uart_sw_send_byte('\n');
 453   3      //      machine_state
 454   3      //      uart_sw_send_number(machine_state);
 455   3      //      uart_sw_send_byte('\n');
 456   3      //      
 457   3            uart_sw_send_number(data_handle[0]);
 458   3            uart_sw_send_byte('\n');
 459   3            uart_sw_send_number(data_handle[1]);
 460   3            uart_sw_send_byte('\n');
 461   3            uart_sw_send_number(m_rx_data[2]);
 462   3            uart_sw_send_byte('\n');
 463   3            uart_sw_send_byte('\n');
 464   3      
 465   3      //      uart_sw_send_string("NtcI:",5);
 466   3      //      uart_sw_send_number(g_adcNtcIn);
 467   3      //      uart_sw_send_byte('\n');
 468   3      //      uart_sw_send_string("NtcO:",5);
 469   3      //      uart_sw_send_number(g_adcNtcOut);
 470   3      //      uart_sw_send_byte('\n');
 471   3      //      uart_sw_send_number(g_u16CounterFlow);
 472   3      //      uart_sw_send_byte('\n');
 473   3      //      
 474   3      //      uart_sw_send_string("tempi:",6);
 475   3      //      uart_sw_send_number(temp_in);
 476   3      //      uart_sw_send_byte('\n');
 477   3      //      uart_sw_send_string("tempo:",6);
 478   3      //      uart_sw_send_number(temp_out);
 479   3      //      uart_sw_send_byte('\n');
C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 15:36:25 PAGE 9   

 480   3      //      uart_sw_send_string("temps:",6);
 481   3      //      uart_sw_send_number(temp_set);
 482   3      //      uart_sw_send_byte('\n');
 483   3      //      uart_sw_send_number(u16NumActive);
 484   3      //      uart_sw_send_byte('\n');
 485   3      //      uart_sw_send_byte('\n');
 486   3      //      uart_sw_send_string("ntc:",4);
 487   3      //      uart_sw_send_number(g_adcNtcValue);
 488   3      //      uart_sw_send_byte('\n');
 489   3      //      uart_sw_send_string("knob:",5);
 490   3      //      uart_sw_send_number(g_adcKnobValue);
 491   3      //      uart_sw_send_byte('\n');
 492   3      //      uart_sw_send_string("mode:",5);
 493   3      //      uart_sw_send_number(g_powerMode);
 494   3      //      uart_sw_send_byte('\n');
 495   3          }
 496   2          if(u8_flag_2s == 1)
 497   2          {
 498   3            u8_flag_2s = 0;
 499   3          }
 500   2        }
 501   1      }
 502          
 503          
 504          void mode_power_on_normal_program(void)
 505          {
 506   1              // calculate raw active pulse
 507   1            if (temp_set > 0) {
 508   2              /* Compute new control signal */
 509   2      
 510   2              Flow_in = g_u16CounterFlow;
 511   2              Tin = temp_in;
 512   2              
 513   2              for (i = 0; i < 5; i++) {
 514   3                if (Flow_in < Flow_sample_arr[0]) {
 515   4                  break;
 516   4                } else if ((Flow_in >= Flow_sample_arr[i]) && (Flow_in < Flow_sample_arr[i + 1])) {
 517   4                  Flow_sample_index_l = i;
 518   4                  Flow_sample_index_h = i + 1;
 519   4                  break;
 520   4                } else if ((Flow_in >= Flow_sample_arr[4])) {
 521   4                  Flow_sample_index_l = 3;
 522   4                  Flow_sample_index_h = 4;
 523   4                }
 524   3              }
 525   2      
 526   2              for (i = 0; i < MAX_TIN_SAMPLE; i++) {
 527   3                if (Tin < Tin_sample_arr[0]) {
 528   4                  F1 = FULSE_Tset_to_55[0][Flow_sample_index_l];
 529   4                  F2 = FULSE_Tset_to_55[0][Flow_sample_index_h];
 530   4                  break;
 531   4                } else if ((Tin >= Tin_sample_arr[i]) && (Tin < Tin_sample_arr[i + 1])) {
 532   4                  delta_t_l = FULSE_Tset_to_55[i][Flow_sample_index_l] - FULSE_Tset_to_55[i + 1][Flow_sample_ind
             -ex_l];
 533   4      
 534   4                  delta_t_h = FULSE_Tset_to_55[i][Flow_sample_index_h] - FULSE_Tset_to_55[i + 1][Flow_sample_ind
             -ex_h];
 535   4      
 536   4                  F1 = FULSE_Tset_to_55[i][Flow_sample_index_l] - (Tin - Tin_sample_arr[i]) * delta_t_l / 2.0;
 537   4      
 538   4                  F2 = FULSE_Tset_to_55[i][Flow_sample_index_h] - (Tin - Tin_sample_arr[i]) * delta_t_h / 2.0;
 539   4      
C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 15:36:25 PAGE 10  

 540   4                  break;
 541   4                } else if ((Tin >= Tin_sample_arr[MAX_TIN_SAMPLE - 1])) {
 542   4                  F1 = FULSE_Tset_to_55[MAX_TIN_SAMPLE - 1][Flow_sample_index_l];
 543   4                  F2 = FULSE_Tset_to_55[MAX_TIN_SAMPLE - 1][Flow_sample_index_h];
 544   4                }
 545   3              }
 546   2      
 547   2              F4 = F1 - (F1 - F2) * (Flow_in - Flow_sample_arr[Flow_sample_index_l]) / 5.0;
 548   2              F = (temp_set - Tin) * F4 * 10 / (55 - Tin);
 549   2              if ((int)F % 10 >= 5) {
 550   3                fulse = F / 10 + 1;
 551   3              } else {
 552   3                fulse = F / 10;
 553   3              }
 554   2      
 555   2              if (temp_set > temp_in) {
 556   3                u16NumActive = fulse;
 557   3              } else
 558   2                u16NumActive = 0;
 559   2      
 560   2              if ((temp_out > temp_set)) {
 561   3                u16NumActive = u16NumActive * 9 / 10;
 562   3              }
 563   2              if ((temp_out < temp_set)) {
 564   3                if (temp_out < temp_set - 12) {
 565   4                  b_boost = 1;  
 566   4                }
 567   3                if (temp_out < temp_set - 6) {
 568   4                  if (b_boost == 1) u16NumActive = u16NumActive * 14 / 10;
 569   4                } else if (temp_out < temp_set - 1) {
 570   4                  if (b_boost == 1) u16NumActive = u16NumActive * 12 / 10;
 571   4                } else {
 572   4                  b_boost = 0;
 573   4                  u16NumActive = u16NumActive * 11 / 10;
 574   4                }
 575   3              }
 576   2      
 577   2              if (u16NumActive > 200) u16NumActive = 200;
 578   2              
 579   2              num_active_pulse = u16NumActive / 10;
 580   2              num_addition = u16NumActive - (num_active_pulse * 10);
 581   2      
 582   2              if (num_active_pulse > 20) {
 583   3                num_active_pulse = 20;
 584   3                num_addition = 0;
 585   3              }
 586   2            } else {
 587   2              u16NumActive = 0;
 588   2              num_active_pulse = 0;
 589   2              num_addition = 0;
 590   2            }
 591   1      }
 592          
 593          
 594          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2359    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    229    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.60.7.0   MAIN                                                              04/16/2024 15:36:25 PAGE 11  

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     10    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
