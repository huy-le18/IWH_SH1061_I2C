C51 COMPILER V9.60.7.0   ISR                                                               04/16/2024 15:36:26 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE ISR
OBJECT MODULE PLACED IN .\Output\isr.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\library\library_app\src\isr.c LARGE OMF2 OPTIMIZE(7,SPEED) BROWSE INC
                    -DIR(..\driver;..\driver\driver_debug\inc;..\library\library_app\inc;..\library\library_debug\inc;..\driver\driver_app\in
                    -c;..\library\library_i2c\inc) DEBUG PRINT(.\lst\isr.lst) TABS(2) OBJECT(.\Output\isr.obj)

line level    source

   1          #include "ms51_16k.h"
   2          #include "driver_app.h"
   3          #include "library_app.h"
   4          // for intterupt 
   5          #include <intrins.h>
   6          
   7          #define C_1MS_CNT_VALUE 5
   8          #define ADDRESS_SLAVE   0xA0
   9          #define WRITE           0
  10          #define READ            1
  11          
  12          #define FLAG_WRITE          0
  13          #define FLAG_READ           1
  14          
  15          #define MAX_TRIAC_PULSE         20
  16          #define MAX_ADDITION_INTERVAL   10
  17          
  18          #define MAX_12MS_CNT 60
  19          
  20          
  21          // For 1ms Timer0 Interrupt use. To count global time 50us, 200us, 1ms, 10ms, 100ms, 500ms, 2s
  22          volatile unsigned char  u8_flag_200us = 0, u8_flag_1ms = 0, u8_flag_2ms = 0, u8_flag_10ms = 0, u8_flag_50ms
             - = 0;
  23          volatile unsigned char u8_flag_100ms = 0, u8_flag_200ms = 0, u8_flag_500ms = 0, u8_flag_1s = 0, u8_flag_2s
             - = 0; 
  24          volatile unsigned int u16_timer3_int_counter, u16_1ms_timer_counter, u16_2ms_timer_counter, u16_10ms_time_
             -counter, u16_50ms_time_counter;
  25          volatile unsigned int u16_100ms_time_counter, u16_200ms_time_counter,  u16_500ms_time_counter,u16_1s_time_
             -counter, u16_2s_time_counter;
  26          
  27          volatile unsigned int  u16_adc_value = 0;
  28          volatile unsigned char u8_flag_adc = 0;
  29          
  30          volatile bit b_i2c_read_write = FLAG_WRITE;
  31          
  32          extern volatile uint8_t m_tx_data[3];
  33          extern volatile uint8_t m_rx_data[3];
  34          
  35          volatile uint8_t u8_cnt_data_rx = 0;
  36          volatile uint8_t u8_cnt_data_tx = 0;
  37          
  38          volatile uint8_t addSlaveAndRW = ADDRESS_SLAVE|WRITE;
  39          
  40          volatile bit b_flag_i2c_receive = 0;
  41          volatile bit b_flag_i2c_transmit = 0;
  42          
  43          volatile uint8_t u8_i2c_time_out = 0;
  44          
  45          volatile uint8_t u8_detect_zero = 0;
  46          
  47          volatile uint8_t count12ms = 0;
  48          
  49          volatile uint8_t triac_pulse_cnt;
C51 COMPILER V9.60.7.0   ISR                                                               04/16/2024 15:36:26 PAGE 2   

  50          volatile uint8_t num_active_pulse;           // power from 0 to 20
  51          volatile uint8_t num_active_pulse_with_add;  // from 0 to 20
  52          volatile uint8_t pulse_trigger_off_cnt;
  53          volatile bit b_triggered;
  54          volatile uint8_t num_addition;
  55          volatile uint8_t additionInterval;
  56          volatile uint16_t u16NumActive;  // raw number of active pulse * 10
  57          
  58          extern volatile bit b_test_cg;   // test chong giat
  59          extern volatile bit b_reset_cg;  // reset chong giat
  60          extern volatile uint8_t test_cg_cnt;
  61          extern volatile uint8_t reset_cg_cnt;
  62          
  63          
  64          void Timer3_ISR(void) interrupt 16        // Vector @  0x83
  65          {
  66   1        _push_(SFRS);
  67   1        clr_T3CON_TF3;
  68   1        u16_timer3_int_counter ++;  
  69   1        u8_flag_200us = 1;
  70   1        
  71   1        //---1ms-------------------------------------------
  72   1        if(u16_timer3_int_counter >= C_1MS_CNT_VALUE){            //1ms
  73   2          u16_timer3_int_counter = 0; 
  74   2          u16_1ms_timer_counter ++;
  75   2          u8_flag_1ms = 1;
  76   2        }
  77   1        //---2ms-------------------------------------------
  78   1          if(u16_1ms_timer_counter >= 2){                         //2ms
  79   2          u16_1ms_timer_counter = 0;
  80   2          u16_2ms_timer_counter ++; 
  81   2          u8_flag_2ms = 1;      
  82   2        }
  83   1          
  84   1        
  85   1        //---10ms-------------------------------------------
  86   1        if(u16_2ms_timer_counter >= 5){                         //10ms
  87   2          u16_2ms_timer_counter = 0;
  88   2          u16_10ms_time_counter ++; 
  89   2          u8_flag_10ms = 1;     
  90   2          
  91   2                // test chong giat
  92   2            if (b_test_cg == 1) {
  93   3              if (test_cg_cnt < 17) {
  94   4                lo_write_tonggle();
  95   4                test_cg_cnt++;
  96   4              } else {
  97   4                b_test_cg = 0;
  98   4                test_cg_cnt = 0;
  99   4                lo_write_low();
 100   4              }
 101   3            }
 102   2            
 103   2            // reset chong giat
 104   2            if (b_reset_cg == 1) {
 105   3              if (reset_cg_cnt < 30) {
 106   4                reset_cg_cnt++;
 107   4                reset_lo_write_high();
 108   4              } else {
 109   4                b_reset_cg = 0;
 110   4                reset_cg_cnt = 0;
 111   4                reset_lo_write_low();
C51 COMPILER V9.60.7.0   ISR                                                               04/16/2024 15:36:26 PAGE 3   

 112   4              }
 113   3            }
 114   2        }
 115   1        
 116   1        
 117   1          //---100ms------------------------------------------
 118   1        if(u16_10ms_time_counter >= 5){                         //100ms
 119   2          u16_10ms_time_counter = 0;
 120   2          u16_50ms_time_counter ++; 
 121   2          u8_flag_50ms = 1;
 122   2        }
 123   1        
 124   1        
 125   1        //---100ms------------------------------------------
 126   1        if(u16_50ms_time_counter >= 2){                         //100ms
 127   2          u16_50ms_time_counter = 0;
 128   2          u16_100ms_time_counter ++;  
 129   2          u8_flag_100ms = 1;
 130   2        }
 131   1        
 132   1        
 133   1        //---200ms------------------------------------------
 134   1        if(u16_100ms_time_counter >= 2){                          //200ms
 135   2          u16_100ms_time_counter = 0;
 136   2          u16_200ms_time_counter ++;  
 137   2          u8_flag_200ms = 1;
 138   2        }
 139   1        
 140   1      //  //---500ms------------------------------------------
 141   1      //  if(u16_100ms_time_counter >= 5){                          //500ms
 142   1      //    u16_100ms_time_counter = 0;
 143   1      //    u16_500ms_time_counter ++;  
 144   1      //    u8_flag_500ms = 1;
 145   1      //  }
 146   1        
 147   1        //---1s--------------------------------------------
 148   1        if(u16_200ms_time_counter >= 5){                          //1s
 149   2          u16_200ms_time_counter = 0;
 150   2          u16_1s_time_counter ++; 
 151   2          u8_flag_1s = 1;
 152   2        }       
 153   1          //---2s--------------------------------------------
 154   1        if(u16_1s_time_counter >= 2){                             //2s
 155   2          u16_1s_time_counter = 0;
 156   2          u16_2s_time_counter ++; 
 157   2          u8_flag_2s = 1;
 158   2        } 
 159   1        
 160   1        count12ms++;
 161   1        if (count12ms >= MAX_12MS_CNT) {
 162   2          count12ms = 0;
 163   2        }
 164   1        if (b_triggered == 1) {
 165   2          if (count12ms == pulse_trigger_off_cnt) {
 166   3            ctr_triac_write_high();
 167   3            b_triggered = 0;
 168   3          }
 169   2        }
 170   1        
 171   1        _pop_(SFRS);
 172   1      }
 173          
C51 COMPILER V9.60.7.0   ISR                                                               04/16/2024 15:36:26 PAGE 4   

 174          
 175          // interrupt for ADC
 176          
 177          void ADC_ISR(void) interrupt 11  // Vector @  0x5B
 178          {
 179   1        _push_(SFRS);
 180   1        clr_ADCCON0_ADCF;
 181   1        u16_adc_value = adc_read();
 182   1        u8_flag_adc = 1;
 183   1        _pop_(SFRS);
 184   1      }
 185          
 186          void Pin_INT_ISR(void) interrupt 7  // Vector @  0x3B
 187          {
 188   1        _push_(SFRS);
 189   1        
 190   1          // index pulse
 191   1        if (triac_pulse_cnt < MAX_TRIAC_PULSE - 1) {
 192   2          triac_pulse_cnt++;
 193   2        } else {
 194   2          triac_pulse_cnt = 0;
 195   2      
 196   2          if (additionInterval < MAX_ADDITION_INTERVAL - 1) {
 197   3            additionInterval++;
 198   3          } else {
 199   3            additionInterval = 0;
 200   3          }
 201   2        }
 202   1        
 203   1          // update num_active_pulse_with_add
 204   1        if (additionInterval < num_addition) {
 205   2          num_active_pulse_with_add = num_active_pulse + 1;
 206   2          if (num_active_pulse_with_add > 20) {
 207   3            num_active_pulse_with_add = 20;
 208   3          }
 209   2        } else {
 210   2          num_active_pulse_with_add = num_active_pulse;
 211   2        }
 212   1        
 213   1        
 214   1        if (u16NumActive > 0) 
 215   1        {
 216   2           if (triac_pulse_cnt < num_active_pulse_with_add)
 217   2           {
 218   3             ctr_triac_write_low();
 219   3             b_triggered = 1;  // triac triggerd
 220   3             pulse_trigger_off_cnt = count12ms;
 221   3           }
 222   2         }
 223   1      
 224   1        
 225   1      //  u8_detect_zero++;
 226   1        
 227   1        PIF = 0;
 228   1        _pop_(SFRS);
 229   1      }
 230          
 231          
 232          
 233          void I2C_ISR(void) interrupt 6  // Vector @  0x3B
 234          {
 235   1        _push_(SFRS);
C51 COMPILER V9.60.7.0   ISR                                                               04/16/2024 15:36:26 PAGE 5   

 236   1        SFRS = 0;
 237   1        if(I2CON & (1 << 3))
 238   1        {
 239   2          switch (I2STAT)
 240   2          {
 241   3               /* Bus error */
 242   3            case 0x00: 
 243   3              I2C_SET_STOP();
 244   3              break;
 245   3            
 246   3              /* I2C start */
 247   3            case 0x08: 
 248   3              I2DAT = addSlaveAndRW;
 249   3              I2C_CLEAR_START();  
 250   3              I2C_CLEAR_SI();   
 251   3              break;
 252   3            
 253   3            /* I2C repeat start */
 254   3            case 0x10:  
 255   3        //      I2C_SET_STOP(); 
 256   3              break;
 257   3            
 258   3            /* Master Transmit Address ACK  */
 259   3            case 0x18:
 260   3              I2DAT = m_tx_data[0];     
 261   3              break;
 262   3            
 263   3            /* Master Transmit Address NACK  */
 264   3            case 0x20:
 265   3              I2C_SET_STOP(); 
 266   3              break;
 267   3            
 268   3            /* Master Transmit Data ACK  */
 269   3            case 0x28:   
 270   3              if(u8_cnt_data_tx == 0)
 271   3              {
 272   4                I2DAT = m_tx_data[1];
 273   4                u8_cnt_data_tx = 1;
 274   4              }
 275   3              else if(u8_cnt_data_tx == 1)
 276   3              {
 277   4                I2DAT = m_tx_data[2];
 278   4                u8_cnt_data_tx = 2;
 279   4              }
 280   3              else if(u8_cnt_data_tx == 2)
 281   3              {
 282   4                I2C_SET_STOP(); 
 283   4                u8_cnt_data_tx = 0;
 284   4                b_i2c_read_write = FLAG_READ;
 285   4              }
 286   3              break;
 287   3            
 288   3            /* Master Transmit Data NACK  */
 289   3            case 0x30:
 290   3        //      I2DAT = 0x55;
 291   3              I2C_SET_STOP();
 292   3              break;
 293   3            
 294   3            /* Master Arbitration Lost  */
 295   3            case 0x38:
 296   3              I2C_SET_STOP();
 297   3              break;
C51 COMPILER V9.60.7.0   ISR                                                               04/16/2024 15:36:26 PAGE 6   

 298   3            
 299   3            
 300   3            
 301   3            /* Master Receive Address ACK  */
 302   3            case 0x40:
 303   3              I2C_SET_AA();
 304   3              break;
 305   3            
 306   3            /* Master Receive Address NACK  */
 307   3            case 0x48:
 308   3              I2C_SET_STOP();
 309   3              I2C_SET_AA();
 310   3              break;
 311   3            
 312   3            /* Master Receive Data ACK  */
 313   3            case 0x50:
 314   3              if(u8_cnt_data_rx == 0)
 315   3              {
 316   4                m_rx_data[0] = I2DAT;
 317   4                u8_cnt_data_rx = 1;
 318   4                I2C_SET_AA();
 319   4              }
 320   3              else if (u8_cnt_data_rx == 1)
 321   3              {
 322   4                m_rx_data[1] = I2DAT;
 323   4                u8_cnt_data_rx = 0;
 324   4                I2C_CLEAR_AA();
 325   4              }
 326   3              break;
 327   3            
 328   3            /* Master Receive Data NACK  */
 329   3            case 0x58:
 330   3              m_rx_data[2] = I2DAT;
 331   3              b_i2c_read_write = FLAG_WRITE;
 332   3              b_flag_i2c_receive = 1;
 333   3              I2C_SET_STOP();
 334   3              I2C_SET_AA();
 335   3              break;
 336   3          }
 337   2            // clear SI
 338   2          I2C_CLEAR_SI();
 339   2        }
 340   1        _pop_(SFRS);
 341   1      }
 342          
 343          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1032    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     47    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
